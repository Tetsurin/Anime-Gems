<div class = "main-container">
   
    <div class = "anime-catalog-container">
        
        <div class = "catalog-filter">

            <div class = "filter-titles">
                <h3 class = "filter-status-title">Статус</h3>
            </div>
            <div class = "filter-status">
                <div class = "filter-status-buttons">
                    <span class = "filter-buttons-text">Онґоїнг</span>
                </div>

                <div class = "filter-status-buttons">
                    <span class = "filter-buttons-text">Завершено</span>
                </div>
            </div>
            
            <div class = "filter-titles">
                <h3 class = "filter-type-title">Тип</h3>
            </div>

            <div class = "filter-type">
                <div class = "filter-type-buttons">
                    <span class = "filter-buttons-text">TV - Серіал</span>
                </div>

                <div class = "filter-type-buttons">
                    <span class = "filter-buttons-text">Фільм</span>
                </div>
            </div>

            <div class = "filter-titles">
                <h3 class = "filter-year-title">Рік виходу</h3>
            </div>

            <div class = "filter-year">
               <div class="range_container">
                    
                    <div class="form_control">
                        <div class="form_control_container">
                            <input class="form_control_container__time__input" type="number" id="fromInput" value="1970" min="1970" max="2024"/>
                        </div>
                        <div class="sliders_control">
                            <input id="fromSlider" type="range" value="1970" min="1970" max="2024"/>
                            <input id="toSlider" type="range" value="2024" min="1970" max="2024"/>
                        </div>
                        <div class="form_control_container">
                            <input class="form_control_container__time__input" type="number" id="toInput" value="2024" min="1970" max="2024"/>
                        </div>
                     </div>
                </div>
            </div>

            <div class = "filter-titles">
                <h3 class = "filter-status-title">Жанри</h3>
            </div>

            <div class = "filter-genres" >
                <%@genres.each do |genre|%>
                    <div class = "filter-genres-buttons">
                        <span class = "filter-buttons-text"><%=genre.name%></span>
                    </div>
                <%end%>
            </div>

            <div class = "filter-clear-button">
                <h3 class = "filter-clear-button-text">Очистити</h3>
            </div>
            
        </div>

       <div id="anime-posters"> 
            <%=render"anime_posters"%>
       </div> 
    </div>
</div>

<script type="text/javascript">  
    function controlFromInput(fromSlider, fromInput, toInput, controlSlider) {
    const [from, to] = getParsed(fromInput, toInput);
    fillSlider(fromInput, toInput, '#C6C6C6', '#00d873ec', controlSlider);
    if (from > to) {
        fromSlider.value = to;
        fromInput.value = to;
    } else {
        fromSlider.value = from;
    }
}
    
function controlToInput(toSlider, fromInput, toInput, controlSlider) {
    const [from, to] = getParsed(fromInput, toInput);
    fillSlider(fromInput, toInput, '#C6C6C6', '#00d873ec', controlSlider);
    setToggleAccessible(toInput);
    if (from <= to) {
        toSlider.value = to;
        toInput.value = to;
    } else {
        toInput.value = from;
    }
}

function controlFromSlider(fromSlider, toSlider, fromInput) {
  const [from, to] = getParsed(fromSlider, toSlider);
  fillSlider(fromSlider, toSlider, '#C6C6C6', '#00d873ec', toSlider);
  if (from > to) {
    fromSlider.value = to;
    fromInput.value = to;
  } else {
    fromInput.value = from;
  }
}

function controlToSlider(fromSlider, toSlider, toInput) {
  const [from, to] = getParsed(fromSlider, toSlider);
  fillSlider(fromSlider, toSlider, '#C6C6C6', '#00d873ec', toSlider);
  setToggleAccessible(toSlider);
  if (from <= to) {
    toSlider.value = to;
    toInput.value = to;
  } else {
    toInput.value = from;
    toSlider.value = from;
  }
}

function getParsed(currentFrom, currentTo) {
  const from = parseInt(currentFrom.value, 10);
  const to = parseInt(currentTo.value, 10);
  return [from, to];
}

function fillSlider(from, to, sliderColor, rangeColor, controlSlider) {
    const rangeDistance = to.max-to.min;
    const fromPosition = from.value - to.min;
    const toPosition = to.value - to.min;
    controlSlider.style.background = `linear-gradient(
      to right,
      ${sliderColor} 0%,
      ${sliderColor} ${(fromPosition)/(rangeDistance)*100}%,
      ${rangeColor} ${((fromPosition)/(rangeDistance))*100}%,
      ${rangeColor} ${(toPosition)/(rangeDistance)*100}%, 
      ${sliderColor} ${(toPosition)/(rangeDistance)*100}%, 
      ${sliderColor} 100%)`;
}

function setToggleAccessible(currentTarget) {
  const toSlider = document.querySelector('#toSlider');
  if (Number(currentTarget.value) <= 0 ) {
    toSlider.style.zIndex = 2;
  } else {
    toSlider.style.zIndex = 0;
  }
}

const fromSlider = document.querySelector('#fromSlider');
const toSlider = document.querySelector('#toSlider');
const fromInput = document.querySelector('#fromInput');
const toInput = document.querySelector('#toInput');
fillSlider(fromSlider, toSlider, '#C6C6C6', '#00d873ec', toSlider);
setToggleAccessible(toSlider);

fromSlider.oninput = () => controlFromSlider(fromSlider, toSlider, fromInput);
toSlider.oninput = () => controlToSlider(fromSlider, toSlider, toInput);
fromInput.oninput = () => controlFromInput(fromSlider, fromInput, toInput, toSlider);
toInput.oninput = () => controlToInput(toSlider, fromInput, toInput, toSlider);
</script>

<script>
  let nav = document.querySelector("nav");
    window.onscroll = function() {
      if(document.documentElement.scrollTop > 20){
        nav.classList.add("sticky");
      }else {
        nav.classList.remove("sticky");
      }
    }
</script>

<script>
    const genreButtons = document.querySelectorAll(".filter-genres-buttons");
    let urlParams;
    genreButtons.forEach(button => {
        button.addEventListener("click", function() {
            button.classList.toggle("selected");
    const genre = button.innerText;
    const urlParams = new URLSearchParams(window.location.search);
    if (window.location.search === '') {
        // If there are no query parameters, set the 'genre' parameter directly
        urlParams.set('genre', genre);
    } else {
        // If there are query parameters, proceed with your existing logic
        if (urlParams.has('genre')) {
            const currentGenres = urlParams.get('genre').split(',');
            if (currentGenres.includes(genre)) {
                const updatedGenres = currentGenres.filter(item => item !== genre);
                if (updatedGenres.length > 0) {
                    urlParams.set('genre', updatedGenres.join(','));
                } else {
                    urlParams.delete('genre');
                }
            } else {
                urlParams.set('genre',`${currentGenres.join(',')},${genre}`);
            } 
        } else {
            urlParams.set('genre', genre);
        }
    }
    window.history.replaceState({}, '', `${window.location.pathname}?${urlParams.toString()}`);
            fetch(`/anime_posters?${urlParams.toString()}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text(); // or response.json() if your response is JSON
            })
            .then(data => {
                document.getElementById("anime-posters").innerHTML = "";
                document.getElementById("anime-posters").innerHTML = data;
            })
            .catch(error => {
                console.error('Fetch error:', error);
            })
            .finally(() => {
                // console.log(window.location);
            });
        });
    });

    const statusButtons = document.querySelectorAll(".filter-status-buttons");
    statusButtons.forEach(button => {
        button.addEventListener("click", function() {
            console.log('click');
            button.classList.toggle("selected");
            const status = button.innerText;
            // to do
        });
    });

    
    document.addEventListener("DOMContentLoaded", function() {
        console.log(window.location.search);
        const search = window.location.search;

        if (search && search.length > 0) {
            const urlParams = new URLSearchParams(search);
            const genres = urlParams.get('genre').split(',');

            const genreBtns = Array.from(document.getElementsByClassName('filter-genres-buttons'));
            genreBtns.forEach(genreBtn => {
                const genreText = genreBtn.querySelector('.filter-buttons-text').textContent.trim();

                if (genres.includes(genreText)) {
                    genreBtn.classList.add('selected');
                }
            });
        }
    });


</script>